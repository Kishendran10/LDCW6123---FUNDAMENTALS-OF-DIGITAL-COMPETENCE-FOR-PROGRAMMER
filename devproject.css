





// fuction_2  Data Structures & Doctor Management

cpp
// FILE: data_structures.cpp
struct Doctor {
    string name, specialization, availability;
    double consultationFee;
};

struct Appointment {
    string patientName, doctorName, date, timeSlot;
    double fee;
};

vector<Doctor> doctors;
vector<Appointment> appointments;

void initializeDoctors() {
    doctors = {
        {"Dr. Ahmad Rahman", "General Physician", "Mon-Fri: 9AM-5PM", 50.00},
        {"Dr. Siti Khadijah", "Pediatrician", "Tue-Sat: 10AM-6PM", 75.00}
        // Add more doctors...
    };
}

// fuction_3  Symptom Checker & Health Logic

cpp
// FILE: symptom_checker.cpp
void symptomChecker() {
    string symptoms;
    cout << "Describe your symptoms: ";
    getline(cin, symptoms);
    
    // Symptom analysis logic
    if (symptoms.find("fever") != string::npos) {
        cout << "Advice: Rest and drink fluids...";
    }
    // Add more symptom checks...
}

// Utility functions
int getValidatedInput(int min, int max) {
    // Input validation logic
}

void clearScreen() {
    // Screen clearing logic
}
    
// function_4 Appointment System & Booking Logic

cpp
// FILE: appointment_system.cpp
void bookAppointment() {
    // Display doctors
    // Get patient input
    // Create appointment object
    // Add to appointments vector
}

void viewAppointments() {
    if (appointments.empty()) {
        cout << "No appointments booked.";
        return;
    }
    // Display all appointments
}

void checkDoctorAvailability() {
    // Show available doctors table
}

// function_5  UI/UX & Documentation Specialist

cpp
// FILE: user_interface.cpp
void displayMainMenu() {
    cout << "========================================" << endl;
    cout << "    TELEMEDICINE HEALTHCARE ASSISTANT" << endl;
    cout << "========================================" << endl;
    cout << "1. Symptom Checker" << endl;
    // Beautiful menu design...
}

// FILE: headers.h
#ifndef HEADERS_H
#define HEADERS_H
#include <iostream>
#include <vector>
#include <string>
using namespace std;

// Function declarations
void displayMainMenu();
void symptomChecker();
// ... all other functions
#endif
void bookAppointment() {
    cout << "\n=== BOOK TELECONSULTATION APPOINTMENT ===" << endl;
    
    // Display available doctors
    checkDoctorAvailability();
    
    cout << "\nSelect a doctor (1-" << doctors.size() << "): ";
    int doctorChoice = getValidatedInput(1, doctors.size());
    
    Appointment newAppointment;
    Doctor selectedDoctor = doctors[doctorChoice - 1];
    
    cout << "Enter your full name: ";
    cin.ignore();
    getline(cin, newAppointment.patientName);
    
    cout << "Preferred consultation date (DD/MM/YYYY): ";
    getline(cin, newAppointment.date);
    
    cout << "Preferred time slot (e.g., 10:00 AM): ";
    getline(cin, newAppointment.timeSlot);
    
    newAppointment.doctorName = selectedDoctor.name;
    newAppointment.fee = selectedDoctor.consultationFee;
    
    appointments.push_back(newAppointment);
    
    cout << "\n APPOINTMENT BOOKED SUCCESSFULLY!" << endl;
    cout << "Patient: " << newAppointment.patientName << endl;
    cout << "Doctor: " << newAppointment.doctorName << endl;
    cout << "Date: " << newAppointment.date << endl;
    cout << "Time: " << newAppointment.timeSlot << endl;
    cout << "Consultation Fee: RM " << fixed << setprecision(2) << newAppointment.fee << endl;
    cout << "\n You will receive a confirmation email with video call link." << endl;
}

void viewAppointments() {
    if (appointments.empty()) {
        cout << "\nNo appointments booked yet." << endl;
        return;
    }
    
    cout << "\n=== YOUR APPOINTMENTS ===" << endl;
    cout << left << setw(20) << "Patient" 
         << setw(20) << "Doctor" 
         << setw(12) << "Date" 
         << setw(10) << "Time" 
         << setw(8) << "Fee" << endl;
    cout << string(70, '-') << endl;
    
    for (const auto& appointment : appointments) {
        cout << left << setw(20) << appointment.patientName 
             << setw(20) << appointment.doctorName 
             << setw(12) << appointment.date 
             << setw(10) << appointment.timeSlot 
             << "RM " << fixed << setprecision(2) << appointment.fee << endl;
    }
}

int getValidatedInput(int min, int max) {
    int input;
    while (true) {
        cin >> input;
        if (cin.fail() || input < min || input > max) {
            cin.clear();
            cin.ignore(1000, '\n');
            cout << "Invalid input! Please enter a number between " << min << " and " << max << ": ";
        } else {
            cin.ignore(1000, '\n');
            return input;
        }
    }
}

void clearScreen() {
    // Simple cross-platform screen clearing
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
